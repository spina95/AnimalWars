{"ast":null,"code":"import request from './Request';\nconst TOKEN_KEY = 'jwt';\nconst APIService = {\n  getUserData() {\n    // Return current user data\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/users/rest-auth/user/',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      }\n    });\n  },\n\n  getImageInfo(image_id) {\n    // Return user data of an image\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/image',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      },\n      params: {\n        image_id: image_id\n      }\n    });\n  },\n\n  getHighestScoreImages() {\n    // Return images with higher score\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/higherscore',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      }\n    });\n  },\n\n  getLowerScoreImages() {\n    // Return images with higher score\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/lowerscore',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      }\n    });\n  },\n\n  getnewestImages() {\n    // Return images with higher score\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/newestImages',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      }\n    });\n  },\n\n  getImageUser(user_id) {\n    // Return user data of an image\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/imageuser',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      },\n      params: {\n        user_id: user_id\n      }\n    });\n  },\n\n  getUserImages(user_id) {\n    // Return images of an user\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/profileimages',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      },\n      params: {\n        profile_id: user_id\n      }\n    });\n  },\n\n  searchTags(search, mode) {\n    // Search images with tags\n    const token = localStorage.getItem(TOKEN_KEY);\n    list = search.split(' ');\n    list.remove(\"\");\n    return request({\n      url: '/images/searchTag',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      },\n      params: {\n        \"order\": searchMode == 0 ? \"descending\" : searchMode == 1 ? \"ascending\" : \"newest\",\n        \"tag\": list\n      }\n    });\n  },\n\n  imageTags(image_id) {\n    // Return tags of an image\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/imageTags',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      },\n      params: {\n        image_id: image_id\n      }\n    });\n  },\n\n  randomImages() {\n    // Return two random images\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/randomImages',\n      method: 'GET',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      }\n    });\n  },\n\n  vote(winner_id, loser_id) {\n    // Return two random images\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/vote',\n      method: 'POST',\n      headers: {\n        \"Authorization\": 'Token ' + token\n      },\n      params: {\n        'winner_id': winner_id,\n        'loser_id': loser_id\n      }\n    });\n  },\n\n  postImage(image, title, user_id) {\n    // Post image\n    let fd = new FormData();\n    fd.append('image', image.file);\n    fd.append('name', title);\n    fd.append('user', user_id);\n    const token = localStorage.getItem(TOKEN_KEY);\n    return request({\n      url: '/images/imageupload',\n      method: 'POST',\n      headers: {\n        \"Authorization\": 'Token ' + token,\n        'Content-Type': 'multipart/form-data'\n      },\n      data: fd\n    });\n  },\n\n  postTag(tag, image_id) {\n    // Post tag\n    const token = localStorage.getItem(TOKEN_KEY);\n    let fd = new FormData();\n    fd.append('name', tag);\n    fd.append('image', image_id);\n    return request({\n      url: '/images/createTag',\n      method: 'POST',\n      headers: {\n        \"Authorization\": 'Token ' + token,\n        'Content-Type': 'multipart/form-data'\n      },\n      data: fd\n    });\n  }\n\n};\nexport default APIService;","map":{"version":3,"sources":["D:/Universit√†/Applicazione_web_e_mobile/AnimalWars/app/frontend/src/Utils/API.js"],"names":["request","TOKEN_KEY","APIService","getUserData","token","localStorage","getItem","url","method","headers","getImageInfo","image_id","params","getHighestScoreImages","getLowerScoreImages","getnewestImages","getImageUser","user_id","getUserImages","profile_id","searchTags","search","mode","list","split","remove","searchMode","imageTags","randomImages","vote","winner_id","loser_id","postImage","image","title","fd","FormData","append","file","data","postTag","tag"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,MAAMC,SAAS,GAAG,KAAlB;AAEA,MAAMC,UAAU,GAAG;AAEjBC,EAAAA,WAAW,GAAG;AACZ;AACA,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,wBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B;AAHI,KAAD,CAAd;AAKD,GAVgB;;AAYjBM,EAAAA,YAAY,CAACC,QAAD,EAAW;AACrB;AACA,UAAMP,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,eADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B,OAHI;AAIbQ,MAAAA,MAAM,EAAE;AAACD,QAAAA,QAAQ,EAAEA;AAAX;AAJK,KAAD,CAAd;AAMD,GArBgB;;AAuBjBE,EAAAA,qBAAqB,GAAG;AACtB;AACA,UAAMT,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,qBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B;AAHI,KAAD,CAAd;AAKD,GA/BgB;;AAiCjBU,EAAAA,mBAAmB,GAAG;AACpB;AACA,UAAMV,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,oBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B;AAHI,KAAD,CAAd;AAKD,GAzCgB;;AA2CjBW,EAAAA,eAAe,GAAG;AAChB;AACA,UAAMX,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,sBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B;AAHI,KAAD,CAAd;AAKD,GAnDgB;;AAqDjBY,EAAAA,YAAY,CAACC,OAAD,EAAU;AACpB;AACA,UAAMb,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,mBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B,OAHI;AAIbQ,MAAAA,MAAM,EAAE;AAACK,QAAAA,OAAO,EAAEA;AAAV;AAJK,KAAD,CAAd;AAMD,GA9DgB;;AAgEjBC,EAAAA,aAAa,CAACD,OAAD,EAAU;AACrB;AACA,UAAMb,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,uBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B,OAHI;AAIbQ,MAAAA,MAAM,EAAE;AAACO,QAAAA,UAAU,EAAEF;AAAb;AAJK,KAAD,CAAd;AAMD,GAzEgB;;AA2EjBG,EAAAA,UAAU,CAACC,MAAD,EAASC,IAAT,EAAe;AACvB;AACA,UAAMlB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACAsB,IAAAA,IAAI,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAAP;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,EAAZ;AACA,WAAOzB,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,mBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B,OAHI;AAIbQ,MAAAA,MAAM,EAAE;AACN,iBAASc,UAAU,IAAI,CAAd,GAAkB,YAAlB,GAAiCA,UAAU,IAAI,CAAd,GAAkB,WAAlB,GAAgC,QADpE;AAEN,eAAOH;AAFD;AAJK,KAAD,CAAd;AASD,GAzFgB;;AA2FjBI,EAAAA,SAAS,CAAChB,QAAD,EAAW;AAClB;AACA,UAAMP,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,mBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B,OAHI;AAIbQ,MAAAA,MAAM,EAAE;AAACD,QAAAA,QAAQ,EAAEA;AAAX;AAJK,KAAD,CAAd;AAMD,GApGgB;;AAsGjBiB,EAAAA,YAAY,GAAG;AACb;AACA,UAAMxB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,sBADQ;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B;AAHI,KAAD,CAAd;AAKD,GA9GgB;;AAgHjByB,EAAAA,IAAI,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AACxB;AACA,UAAM3B,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,cADQ;AAEbC,MAAAA,MAAM,EAAE,MAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL;AAA7B,OAHI;AAIbQ,MAAAA,MAAM,EAAE;AAAC,qBAAakB,SAAd;AAAyB,oBAAYC;AAArC;AAJK,KAAD,CAAd;AAMD,GAzHgB;;AA2HjBC,EAAAA,SAAS,CAACC,KAAD,EAAQC,KAAR,EAAejB,OAAf,EAAwB;AAC/B;AACA,QAAIkB,EAAE,GAAE,IAAIC,QAAJ,EAAR;AACAD,IAAAA,EAAE,CAACE,MAAH,CAAU,OAAV,EAAmBJ,KAAK,CAACK,IAAzB;AACAH,IAAAA,EAAE,CAACE,MAAH,CAAU,MAAV,EAAkBH,KAAlB;AACAC,IAAAA,EAAE,CAACE,MAAH,CAAU,MAAV,EAAkBpB,OAAlB;AACA,UAAMb,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,WAAOD,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,qBADQ;AAEbC,MAAAA,MAAM,EAAE,MAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL,KAA7B;AAAoC,wBAAgB;AAApD,OAHI;AAIbmC,MAAAA,IAAI,EAAEJ;AAJO,KAAD,CAAd;AAMD,GAxIgB;;AA0IjBK,EAAAA,OAAO,CAACC,GAAD,EAAM9B,QAAN,EAAgB;AACrB;AACA,UAAMP,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAd;AACA,QAAIkC,EAAE,GAAE,IAAIC,QAAJ,EAAR;AACAD,IAAAA,EAAE,CAACE,MAAH,CAAU,MAAV,EAAkBI,GAAlB;AACAN,IAAAA,EAAE,CAACE,MAAH,CAAU,OAAV,EAAmB1B,QAAnB;AACA,WAAOX,OAAO,CAAC;AACbO,MAAAA,GAAG,EAAE,mBADQ;AAEbC,MAAAA,MAAM,EAAE,MAFK;AAGbC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,WAAWL,KAA7B;AAAoC,wBAAgB;AAApD,OAHI;AAIbmC,MAAAA,IAAI,EAAEJ;AAJO,KAAD,CAAd;AAMD;;AAtJgB,CAAnB;AA0JA,eAAejC,UAAf","sourcesContent":["import request from './Request'\r\n\r\nconst TOKEN_KEY = 'jwt';\r\n\r\nconst APIService = {\r\n\r\n  getUserData() {\r\n    // Return current user data\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/users/rest-auth/user/',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token}\r\n    });\r\n  }, \r\n\r\n  getImageInfo(image_id) {\r\n    // Return user data of an image\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/image',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token},\r\n      params: {image_id: image_id},\r\n    });\r\n  }, \r\n\r\n  getHighestScoreImages() {\r\n    // Return images with higher score\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/higherscore',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token}\r\n    });\r\n  }, \r\n\r\n  getLowerScoreImages() {\r\n    // Return images with higher score\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/lowerscore',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token}\r\n    });\r\n  }, \r\n\r\n  getnewestImages() {\r\n    // Return images with higher score\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/newestImages',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token}\r\n    });\r\n  }, \r\n\r\n  getImageUser(user_id) {\r\n    // Return user data of an image\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/imageuser',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token},\r\n      params: {user_id: user_id},\r\n    });\r\n  }, \r\n\r\n  getUserImages(user_id) {\r\n    // Return images of an user\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/profileimages',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token},\r\n      params: {profile_id: user_id},\r\n    });\r\n  }, \r\n\r\n  searchTags(search, mode) {\r\n    // Search images with tags\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    list = search.split(' ');\r\n    list.remove(\"\"); \r\n    return request({\r\n      url: '/images/searchTag',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token},\r\n      params: {\r\n        \"order\": searchMode == 0 ? \"descending\" : searchMode == 1 ? \"ascending\" : \"newest\",\r\n        \"tag\": list\r\n      },\r\n    });\r\n  }, \r\n\r\n  imageTags(image_id) {\r\n    // Return tags of an image\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/imageTags',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token},\r\n      params: {image_id: image_id},\r\n    });\r\n  }, \r\n\r\n  randomImages() {\r\n    // Return two random images\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/randomImages',\r\n      method: 'GET',\r\n      headers: {\"Authorization\": 'Token ' + token},\r\n    });\r\n  }, \r\n\r\n  vote(winner_id, loser_id) {\r\n    // Return two random images\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/vote',\r\n      method: 'POST',\r\n      headers: {\"Authorization\": 'Token ' + token},\r\n      params: {'winner_id': winner_id, 'loser_id': loser_id}\r\n    });\r\n  }, \r\n\r\n  postImage(image, title, user_id) {\r\n    // Post image\r\n    let fd= new FormData()\r\n    fd.append('image', image.file)\r\n    fd.append('name', title)\r\n    fd.append('user', user_id)\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    return request({\r\n      url: '/images/imageupload',\r\n      method: 'POST',\r\n      headers: {\"Authorization\": 'Token ' + token, 'Content-Type': 'multipart/form-data',},\r\n      data: fd\r\n    });\r\n  }, \r\n\r\n  postTag(tag, image_id) {\r\n    // Post tag\r\n    const token = localStorage.getItem(TOKEN_KEY)\r\n    let fd= new FormData()\r\n    fd.append('name', tag)\r\n    fd.append('image', image_id)\r\n    return request({\r\n      url: '/images/createTag',\r\n      method: 'POST',\r\n      headers: {\"Authorization\": 'Token ' + token, 'Content-Type': 'multipart/form-data',},\r\n      data: fd\r\n    });\r\n  }, \r\n\r\n}\r\n\r\nexport default APIService;"]},"metadata":{},"sourceType":"module"}