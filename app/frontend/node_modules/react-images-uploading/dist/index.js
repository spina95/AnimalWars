'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var getBase64 = function (file) {
    var reader = new FileReader();
    return new Promise(function (resolve) {
        reader.addEventListener("load", function () { return resolve(String(reader.result)); });
        reader.readAsDataURL(file);
    });
};

var useRef = React.useRef, useState = React.useState, useEffect = React.useEffect;
var defaultErrors = {
    maxFileSize: false,
    maxNumber: false,
    acceptType: false,
};
var ImageUploading = function (_a) {
    var multiple = _a.multiple, onChange = _a.onChange, maxNumber = _a.maxNumber, children = _a.children, defaultValue = _a.defaultValue, acceptType = _a.acceptType, maxFileSize = _a.maxFileSize;
    var inputRef = useRef(null);
    var _b = useState(function () {
        var initImageList = [];
        if (defaultValue) {
            initImageList = defaultValue.map(function (item) { return (__assign(__assign({}, item), { key: item.dataURL, onUpdate: function () { return onImageUpdate(item.dataURL); }, onRemove: function () { return onImageRemove(item.dataURL); } })); });
        }
        return initImageList;
    }), imageList = _b[0], setImageList = _b[1];
    var _c = useState(""), keyUpdate = _c[0], setKeyUpdate = _c[1];
    var _d = useState(__assign({}, defaultErrors)), errors = _d[0], setErrors = _d[1];
    var onStandardizeDataChange = function (list) {
        if (onChange) {
            var sData = list.map(function (_a) {
                var key = _a.key, onUpdate = _a.onUpdate, onRemove = _a.onRemove, restOfItem = __rest(_a, ["key", "onUpdate", "onRemove"]);
                return (__assign({}, restOfItem));
            });
            onChange(sData);
        }
    };
    var onImageUpload = function () {
        inputRef.current && inputRef.current.click();
    };
    var onImageRemoveAll = function () {
        setImageList([]);
        onStandardizeDataChange([]);
    };
    var onImageRemove = function (key) {
        setImageList(function (previousList) {
            var updatedList = previousList.filter(function (item) { return item.key !== key; });
            onStandardizeDataChange(updatedList);
            return updatedList;
        });
    };
    useEffect(function () {
        if (keyUpdate) {
            onImageUpload();
        }
    }, [keyUpdate]);
    var onImageUpdate = function (key) {
        setKeyUpdate(key);
    };
    var getListFile = function (files) {
        var promiseFiles = [];
        for (var i = 0; i < files.length; i++) {
            promiseFiles.push(getBase64(files[i]));
        }
        return Promise.all(promiseFiles).then(function (fileListBase64) {
            var fileList = fileListBase64.map(function (base64, index) {
                var key = new Date().getTime().toString() + "-" + files[index].name;
                return {
                    dataURL: base64,
                    file: files[index],
                    key: key,
                    onUpdate: function () { return onImageUpdate(key); },
                    onRemove: function () { return onImageRemove(key); },
                };
            });
            return fileList;
        });
    };
    var validate = function (fileList) {
        setErrors(__assign({}, defaultErrors));
        if (maxNumber && fileList.length + imageList.length > maxNumber) {
            setErrors(__assign(__assign({}, errors), { maxNumber: true }));
            return false;
        }
        for (var i = 0; i < fileList.length; i++) {
            var file = fileList[i].file;
            if (file) {
                var fileType = file.type;
                if (!fileType.includes("image")) {
                    setErrors(__assign(__assign({}, errors), { acceptType: true }));
                    return false;
                }
                if (maxFileSize) {
                    var size = Math.round(file.size / 1024 / 1024);
                    if (size > maxFileSize) {
                        setErrors(__assign(__assign({}, errors), { maxFileSize: true }));
                        return false;
                    }
                }
                if (acceptType && acceptType.length > 0) {
                    var type = file.name.split(".").pop() || "";
                    if (acceptType.indexOf(type) < 0) {
                        setErrors(__assign(__assign({}, errors), { acceptType: true }));
                        return false;
                    }
                }
            }
        }
        return true;
    };
    var onInputChange = function (e) { return __awaiter(void 0, void 0, void 0, function () {
        var files, fileList_1, updatedFileList;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    files = e.target.files;
                    if (!files) return [3 /*break*/, 2];
                    return [4 /*yield*/, getListFile(files)];
                case 1:
                    fileList_1 = _a.sent();
                    if (fileList_1.length > 0) {
                        if (validate(fileList_1)) {
                            updatedFileList = void 0;
                            if (keyUpdate) {
                                updatedFileList = imageList.map(function (item) {
                                    if (item.key === keyUpdate)
                                        return __assign({}, fileList_1[0]);
                                    return item;
                                });
                                setKeyUpdate("");
                            }
                            else {
                                if (multiple) {
                                    updatedFileList = __spreadArrays(imageList, fileList_1);
                                    if (maxNumber && updatedFileList.length > maxNumber) {
                                        updatedFileList = imageList;
                                    }
                                }
                                else {
                                    updatedFileList = [fileList_1[0]];
                                }
                            }
                            setImageList(updatedFileList);
                            onStandardizeDataChange(updatedFileList);
                        }
                    }
                    else {
                        keyUpdate && setKeyUpdate("");
                    }
                    _a.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    }); };
    var acceptString = acceptType && acceptType.length > 0
        ? acceptType.map(function (item) { return "." + item; }).join(", ")
        : "image/*";
    return (React.createElement(React.Fragment, null,
        React.createElement("input", { type: "file", accept: acceptString, ref: inputRef, multiple: multiple && !keyUpdate, onChange: onInputChange, style: { display: "none" } }),
        children &&
            children({
                imageList: imageList,
                onImageUpload: onImageUpload,
                onImageRemoveAll: onImageRemoveAll,
                errors: errors,
            })));
};
ImageUploading.defaultProps = {
    maxNumber: 1000,
    multiple: false,
    acceptType: [],
};

exports.default = ImageUploading;
//# sourceMappingURL=index.js.map
